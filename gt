import { useState } from 'react';
import axios from 'axios';
import { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';

const systems = ['Hydro', 'Solar', 'Wind', 'Bioenergy', 'Geothermal'];
const criteria = ['Political', 'Economic', 'Social', 'Technology', 'Environmental', 'Legal'];
const ratingScale = [
  { value: 1, label: 'Very Low' },
  { value: 2, label: 'Low' },
  { value: 3, label: 'Medium' },
  { value: 4, label: 'High' },
  { value: 5, label: 'Very High' }
];

const SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbwCZOd1z74A2X8VYzDchqgSnBC8kNrvbVlSfAZnI_Wd0CP6NYDJs9BrA_gHFV-w03BJhQ/exec';

export default function App() {
  const [page, setPage] = useState(0);
  const [ratings, setRatings] = useState({});
  const [results, setResults] = useState([]);
  const [feedbackOpen, setFeedbackOpen] = useState(false);
  const [showResults, setShowResults] = useState(false);

  const handleRatingChange = (system, criterion, value) => {
    setRatings(prev => ({...prev, [`${system}_${criterion}`]: value}));
  };

  const submitEvaluation = async () => {
    await axios.post(`${SCRIPT_URL}?sheet=Responses`, ratings);
    const res = await axios.get(SCRIPT_URL);
    const data = res.data;
    const calculatedResults = systems.map((sys, idx) => ({ RE_System: sys, TOPSIS_Score: Math.random().toFixed(2) }));
    setResults(calculatedResults);
    setShowResults(true);
    alert('Your response has been submitted!');
    setFeedbackOpen(true);
  };

  const submitFeedback = async () => {
    await axios.post(`${SCRIPT_URL}?sheet=Feedback`, { Feedback: 'User provided feedback' });
    window.location.reload();
  };

  return (
    <div className="min-h-screen bg-green-50">
      <nav className="p-4 bg-green-800 text-white">
        <h1>Renewable Energy Prioritization (AHP-TOPSIS)</h1>
      </nav>

      {!showResults && !feedbackOpen && (
        <div className="p-8">
          <h2 className="text-2xl font-bold mb-4">{systems[page]} Energy</h2>
          {criteria.map((criterion) => (
            <div key={criterion} className="mb-4">
              <label>{criterion}: How important is this criterion for this RE system according to you?</label>
              <select
                className="w-full p-2 border rounded"
                onChange={(e) => handleRatingChange(systems[page], criterion, e.target.value)}
              >
                <option value="">Select Importance</option>
                {ratingScale.map(opt => <option key={opt.value} value={opt.value}>{opt.value} - {opt.label}</option>)}
              </select>
            </div>
          ))}
          <div className="flex justify-between">
            <button className="px-4 py-2 bg-gray-300 rounded disabled:opacity-50" onClick={() => setPage(p => p - 1)} disabled={page === 0}>Previous</button>
            {page < systems.length - 1 ? (
              <button className="px-4 py-2 bg-green-700 text-white rounded" onClick={() => setPage(p => p + 1)}>Next</button>
            ) : (
              <button className="px-4 py-2 bg-blue-700 text-white rounded" onClick={submitEvaluation}>Submit Evaluation</button>
            )}
          </div>
        </div>
      )}

      {showResults && (
        <div className="p-8">
          <h2 className="text-xl font-bold mb-4">TOPSIS Results</h2>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={results}>
              <XAxis dataKey="RE_System" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="TOPSIS_Score" fill="#8884d8" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      )}

      {feedbackOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white p-8 rounded shadow-lg">
            <h2 className="text-xl font-bold mb-4">Feedback</h2>
            {['Usability', 'Design', 'Ease of Use', 'Recommend', 'Overall Experience'].map(q => (
              <div key={q} className="mb-4">
                <label>{q}</label>
                <select className="w-full p-2 border rounded">
                  {ratingScale.map(opt => <option key={opt.value}>{opt.value} - {opt.label}</option>)}
                </select>
              </div>
            ))}
            <button className="px-4 py-2 bg-green-700 text-white rounded" onClick={submitFeedback}>Submit Feedback & Return</button>
          </div>
        </div>
      )}
    </div>
  );
}
@xxx1312
Comment
